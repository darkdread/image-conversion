!function(g,I){"object"==typeof exports&&"object"==typeof module?module.exports=I():"function"==typeof define&&define.amd?define([],I):"object"==typeof exports?exports.imageConversion=I():g.imageConversion=I()}(this,(function(){return function(g){var I={};function B(n){if(I[n])return I[n].exports;var Q=I[n]={i:n,l:!1,exports:{}};return g[n].call(Q.exports,Q,Q.exports,B),Q.l=!0,Q.exports}return B.m=g,B.c=I,B.d=function(g,I,n){B.o(g,I)||Object.defineProperty(g,I,{enumerable:!0,get:n})},B.r=function(g){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},B.t=function(g,I){if(1&I&&(g=B(g)),8&I)return g;if(4&I&&"object"==typeof g&&g&&g.__esModule)return g;var n=Object.create(null);if(B.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:g}),2&I&&"string"!=typeof g)for(var Q in g)B.d(n,Q,function(I){return g[I]}.bind(null,Q));return n},B.n=function(g){var I=g&&g.__esModule?function(){return g.default}:function(){return g};return B.d(I,"a",I),I},B.o=function(g,I){return Object.prototype.hasOwnProperty.call(g,I)},B.p="",B(B.s=1)}([function(module,exports,__webpack_require__){"use strict";eval('// (c) Dean McNamee <dean@gmail.com>, 2013.\n//\n// https://github.com/deanm/omggif\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the "Software"), to\n// deal in the Software without restriction, including without limitation the\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n// sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n// IN THE SOFTWARE.\n//\n// omggif is a JavaScript implementation of a GIF 89a encoder and decoder,\n// including animation and compression.  It does not rely on any specific\n// underlying system, so should run in the browser, Node, or Plask.\n\n\n\nfunction GifWriter(buf, width, height, gopts) {\n  var p = 0;\n\n  var gopts = gopts === undefined ? { } : gopts;\n  var loop_count = gopts.loop === undefined ? null : gopts.loop;\n  var global_palette = gopts.palette === undefined ? null : gopts.palette;\n\n  if (width <= 0 || height <= 0 || width > 65535 || height > 65535)\n    throw new Error("Width/Height invalid.");\n\n  function check_palette_and_num_colors(palette) {\n    var num_colors = palette.length;\n    if (num_colors < 2 || num_colors > 256 ||  num_colors & (num_colors-1)) {\n      throw new Error(\n          "Invalid code/color length, must be power of 2 and 2 .. 256.");\n    }\n    return num_colors;\n  }\n\n  // - Header.\n  buf[p++] = 0x47; buf[p++] = 0x49; buf[p++] = 0x46;  // GIF\n  buf[p++] = 0x38; buf[p++] = 0x39; buf[p++] = 0x61;  // 89a\n\n  // Handling of Global Color Table (palette) and background index.\n  var gp_num_colors_pow2 = 0;\n  var background = 0;\n  if (global_palette !== null) {\n    var gp_num_colors = check_palette_and_num_colors(global_palette);\n    while (gp_num_colors >>= 1) ++gp_num_colors_pow2;\n    gp_num_colors = 1 << gp_num_colors_pow2;\n    --gp_num_colors_pow2;\n    if (gopts.background !== undefined) {\n      background = gopts.background;\n      if (background >= gp_num_colors)\n        throw new Error("Background index out of range.");\n      // The GIF spec states that a background index of 0 should be ignored, so\n      // this is probably a mistake and you really want to set it to another\n      // slot in the palette.  But actually in the end most browsers, etc end\n      // up ignoring this almost completely (including for dispose background).\n      if (background === 0)\n        throw new Error("Background index explicitly passed as 0.");\n    }\n  }\n\n  // - Logical Screen Descriptor.\n  // NOTE(deanm): w/h apparently ignored by implementations, but set anyway.\n  buf[p++] = width & 0xff; buf[p++] = width >> 8 & 0xff;\n  buf[p++] = height & 0xff; buf[p++] = height >> 8 & 0xff;\n  // NOTE: Indicates 0-bpp original color resolution (unused?).\n  buf[p++] = (global_palette !== null ? 0x80 : 0) |  // Global Color Table Flag.\n             gp_num_colors_pow2;  // NOTE: No sort flag (unused?).\n  buf[p++] = background;  // Background Color Index.\n  buf[p++] = 0;  // Pixel aspect ratio (unused?).\n\n  // - Global Color Table\n  if (global_palette !== null) {\n    for (var i = 0, il = global_palette.length; i < il; ++i) {\n      var rgb = global_palette[i];\n      buf[p++] = rgb >> 16 & 0xff;\n      buf[p++] = rgb >> 8 & 0xff;\n      buf[p++] = rgb & 0xff;\n    }\n  }\n\n  if (loop_count !== null) {  // Netscape block for looping.\n    if (loop_count < 0 || loop_count > 65535)\n      throw new Error("Loop count invalid.")\n    // Extension code, label, and length.\n    buf[p++] = 0x21; buf[p++] = 0xff; buf[p++] = 0x0b;\n    // NETSCAPE2.0\n    buf[p++] = 0x4e; buf[p++] = 0x45; buf[p++] = 0x54; buf[p++] = 0x53;\n    buf[p++] = 0x43; buf[p++] = 0x41; buf[p++] = 0x50; buf[p++] = 0x45;\n    buf[p++] = 0x32; buf[p++] = 0x2e; buf[p++] = 0x30;\n    // Sub-block\n    buf[p++] = 0x03; buf[p++] = 0x01;\n    buf[p++] = loop_count & 0xff; buf[p++] = loop_count >> 8 & 0xff;\n    buf[p++] = 0x00;  // Terminator.\n  }\n\n\n  var ended = false;\n\n  this.addFrame = function(x, y, w, h, indexed_pixels, opts) {\n    if (ended === true) { --p; ended = false; }  // Un-end.\n\n    opts = opts === undefined ? { } : opts;\n\n    // TODO(deanm): Bounds check x, y.  Do they need to be within the virtual\n    // canvas width/height, I imagine?\n    if (x < 0 || y < 0 || x > 65535 || y > 65535)\n      throw new Error("x/y invalid.")\n\n    if (w <= 0 || h <= 0 || w > 65535 || h > 65535)\n      throw new Error("Width/Height invalid.")\n\n    if (indexed_pixels.length < w * h)\n      throw new Error("Not enough pixels for the frame size.");\n\n    var using_local_palette = true;\n    var palette = opts.palette;\n    if (palette === undefined || palette === null) {\n      using_local_palette = false;\n      palette = global_palette;\n    }\n\n    if (palette === undefined || palette === null)\n      throw new Error("Must supply either a local or global palette.");\n\n    var num_colors = check_palette_and_num_colors(palette);\n\n    // Compute the min_code_size (power of 2), destroying num_colors.\n    var min_code_size = 0;\n    while (num_colors >>= 1) ++min_code_size;\n    num_colors = 1 << min_code_size;  // Now we can easily get it back.\n\n    var delay = opts.delay === undefined ? 0 : opts.delay;\n\n    // From the spec:\n    //     0 -   No disposal specified. The decoder is\n    //           not required to take any action.\n    //     1 -   Do not dispose. The graphic is to be left\n    //           in place.\n    //     2 -   Restore to background color. The area used by the\n    //           graphic must be restored to the background color.\n    //     3 -   Restore to previous. The decoder is required to\n    //           restore the area overwritten by the graphic with\n    //           what was there prior to rendering the graphic.\n    //  4-7 -    To be defined.\n    // NOTE(deanm): Dispose background doesn\'t really work, apparently most\n    // browsers ignore the background palette index and clear to transparency.\n    var disposal = opts.disposal === undefined ? 0 : opts.disposal;\n    if (disposal < 0 || disposal > 3)  // 4-7 is reserved.\n      throw new Error("Disposal out of range.");\n\n    var use_transparency = false;\n    var transparent_index = 0;\n    if (opts.transparent !== undefined && opts.transparent !== null) {\n      use_transparency = true;\n      transparent_index = opts.transparent;\n      if (transparent_index < 0 || transparent_index >= num_colors)\n        throw new Error("Transparent color index.");\n    }\n\n    if (disposal !== 0 || use_transparency || delay !== 0) {\n      // - Graphics Control Extension\n      buf[p++] = 0x21; buf[p++] = 0xf9;  // Extension / Label.\n      buf[p++] = 4;  // Byte size.\n\n      buf[p++] = disposal << 2 | (use_transparency === true ? 1 : 0);\n      buf[p++] = delay & 0xff; buf[p++] = delay >> 8 & 0xff;\n      buf[p++] = transparent_index;  // Transparent color index.\n      buf[p++] = 0;  // Block Terminator.\n    }\n\n    // - Image Descriptor\n    buf[p++] = 0x2c;  // Image Seperator.\n    buf[p++] = x & 0xff; buf[p++] = x >> 8 & 0xff;  // Left.\n    buf[p++] = y & 0xff; buf[p++] = y >> 8 & 0xff;  // Top.\n    buf[p++] = w & 0xff; buf[p++] = w >> 8 & 0xff;\n    buf[p++] = h & 0xff; buf[p++] = h >> 8 & 0xff;\n    // NOTE: No sort flag (unused?).\n    // TODO(deanm): Support interlace.\n    buf[p++] = using_local_palette === true ? (0x80 | (min_code_size-1)) : 0;\n\n    // - Local Color Table\n    if (using_local_palette === true) {\n      for (var i = 0, il = palette.length; i < il; ++i) {\n        var rgb = palette[i];\n        buf[p++] = rgb >> 16 & 0xff;\n        buf[p++] = rgb >> 8 & 0xff;\n        buf[p++] = rgb & 0xff;\n      }\n    }\n\n    p = GifWriterOutputLZWCodeStream(\n            buf, p, min_code_size < 2 ? 2 : min_code_size, indexed_pixels);\n\n    return p;\n  };\n\n  this.end = function() {\n    if (ended === false) {\n      buf[p++] = 0x3b;  // Trailer.\n      ended = true;\n    }\n    return p;\n  };\n\n  this.getOutputBuffer = function() { return buf; };\n  this.setOutputBuffer = function(v) { buf = v; };\n  this.getOutputBufferPosition = function() { return p; };\n  this.setOutputBufferPosition = function(v) { p = v; };\n}\n\n// Main compression routine, palette indexes -> LZW code stream.\n// |index_stream| must have at least one entry.\nfunction GifWriterOutputLZWCodeStream(buf, p, min_code_size, index_stream) {\n  buf[p++] = min_code_size;\n  var cur_subblock = p++;  // Pointing at the length field.\n\n  var clear_code = 1 << min_code_size;\n  var code_mask = clear_code - 1;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  var cur_shift = 0;\n  // We have at most 12-bit codes, so we should have to hold a max of 19\n  // bits here (and then we would write out).\n  var cur = 0;\n\n  function emit_bytes_to_buffer(bit_block_size) {\n    while (cur_shift >= bit_block_size) {\n      buf[p++] = cur & 0xff;\n      cur >>= 8; cur_shift -= 8;\n      if (p === cur_subblock + 256) {  // Finished a subblock.\n        buf[cur_subblock] = 255;\n        cur_subblock = p++;\n      }\n    }\n  }\n\n  function emit_code(c) {\n    cur |= c << cur_shift;\n    cur_shift += cur_code_size;\n    emit_bytes_to_buffer(8);\n  }\n\n  // I am not an expert on the topic, and I don\'t want to write a thesis.\n  // However, it is good to outline here the basic algorithm and the few data\n  // structures and optimizations here that make this implementation fast.\n  // The basic idea behind LZW is to build a table of previously seen runs\n  // addressed by a short id (herein called output code).  All data is\n  // referenced by a code, which represents one or more values from the\n  // original input stream.  All input bytes can be referenced as the same\n  // value as an output code.  So if you didn\'t want any compression, you\n  // could more or less just output the original bytes as codes (there are\n  // some details to this, but it is the idea).  In order to achieve\n  // compression, values greater then the input range (codes can be up to\n  // 12-bit while input only 8-bit) represent a sequence of previously seen\n  // inputs.  The decompressor is able to build the same mapping while\n  // decoding, so there is always a shared common knowledge between the\n  // encoding and decoder, which is also important for "timing" aspects like\n  // how to handle variable bit width code encoding.\n  //\n  // One obvious but very important consequence of the table system is there\n  // is always a unique id (at most 12-bits) to map the runs.  \'A\' might be\n  // 4, then \'AA\' might be 10, \'AAA\' 11, \'AAAA\' 12, etc.  This relationship\n  // can be used for an effecient lookup strategy for the code mapping.  We\n  // need to know if a run has been seen before, and be able to map that run\n  // to the output code.  Since we start with known unique ids (input bytes),\n  // and then from those build more unique ids (table entries), we can\n  // continue this chain (almost like a linked list) to always have small\n  // integer values that represent the current byte chains in the encoder.\n  // This means instead of tracking the input bytes (AAAABCD) to know our\n  // current state, we can track the table entry for AAAABC (it is guaranteed\n  // to exist by the nature of the algorithm) and the next character D.\n  // Therefor the tuple of (table_entry, byte) is guaranteed to also be\n  // unique.  This allows us to create a simple lookup key for mapping input\n  // sequences to codes (table indices) without having to store or search\n  // any of the code sequences.  So if \'AAAA\' has a table entry of 12, the\n  // tuple of (\'AAAA\', K) for any input byte K will be unique, and can be our\n  // key.  This leads to a integer value at most 20-bits, which can always\n  // fit in an SMI value and be used as a fast sparse array / object key.\n\n  // Output code for the current contents of the index buffer.\n  var ib_code = index_stream[0] & code_mask;  // Load first input index.\n  var code_table = { };  // Key\'d on our 20-bit "tuple".\n\n  emit_code(clear_code);  // Spec says first code should be a clear code.\n\n  // First index already loaded, process the rest of the stream.\n  for (var i = 1, il = index_stream.length; i < il; ++i) {\n    var k = index_stream[i] & code_mask;\n    var cur_key = ib_code << 8 | k;  // (prev, k) unique tuple.\n    var cur_code = code_table[cur_key];  // buffer + k.\n\n    // Check if we have to create a new code table entry.\n    if (cur_code === undefined) {  // We don\'t have buffer + k.\n      // Emit index buffer (without k).\n      // This is an inline version of emit_code, because this is the core\n      // writing routine of the compressor (and V8 cannot inline emit_code\n      // because it is a closure here in a different context).  Additionally\n      // we can call emit_byte_to_buffer less often, because we can have\n      // 30-bits (from our 31-bit signed SMI), and we know our codes will only\n      // be 12-bits, so can safely have 18-bits there without overflow.\n      // emit_code(ib_code);\n      cur |= ib_code << cur_shift;\n      cur_shift += cur_code_size;\n      while (cur_shift >= 8) {\n        buf[p++] = cur & 0xff;\n        cur >>= 8; cur_shift -= 8;\n        if (p === cur_subblock + 256) {  // Finished a subblock.\n          buf[cur_subblock] = 255;\n          cur_subblock = p++;\n        }\n      }\n\n      if (next_code === 4096) {  // Table full, need a clear.\n        emit_code(clear_code);\n        next_code = eoi_code + 1;\n        cur_code_size = min_code_size + 1;\n        code_table = { };\n      } else {  // Table not full, insert a new entry.\n        // Increase our variable bit code sizes if necessary.  This is a bit\n        // tricky as it is based on "timing" between the encoding and\n        // decoder.  From the encoders perspective this should happen after\n        // we\'ve already emitted the index buffer and are about to create the\n        // first table entry that would overflow our current code bit size.\n        if (next_code >= (1 << cur_code_size)) ++cur_code_size;\n        code_table[cur_key] = next_code++;  // Insert into code table.\n      }\n\n      ib_code = k;  // Index buffer to single input k.\n    } else {\n      ib_code = cur_code;  // Index buffer to sequence in code table.\n    }\n  }\n\n  emit_code(ib_code);  // There will still be something in the index buffer.\n  emit_code(eoi_code);  // End Of Information.\n\n  // Flush / finalize the sub-blocks stream to the buffer.\n  emit_bytes_to_buffer(1);\n\n  // Finish the sub-blocks, writing out any unfinished lengths and\n  // terminating with a sub-block of length 0.  If we have already started\n  // but not yet used a sub-block it can just become the terminator.\n  if (cur_subblock + 1 === p) {  // Started but unused.\n    buf[cur_subblock] = 0;\n  } else {  // Started and used, write length and additional terminator block.\n    buf[cur_subblock] = p - cur_subblock - 1;\n    buf[p++] = 0;\n  }\n  return p;\n}\n\nfunction GifReader(buf) {\n  var p = 0;\n\n  // - Header (GIF87a or GIF89a).\n  if (buf[p++] !== 0x47 ||            buf[p++] !== 0x49 || buf[p++] !== 0x46 ||\n      buf[p++] !== 0x38 || (buf[p++]+1 & 0xfd) !== 0x38 || buf[p++] !== 0x61) {\n    throw new Error("Invalid GIF 87a/89a header.");\n  }\n\n  // - Logical Screen Descriptor.\n  var width = buf[p++] | buf[p++] << 8;\n  var height = buf[p++] | buf[p++] << 8;\n  var pf0 = buf[p++];  // <Packed Fields>.\n  var global_palette_flag = pf0 >> 7;\n  var num_global_colors_pow2 = pf0 & 0x7;\n  var num_global_colors = 1 << (num_global_colors_pow2 + 1);\n  var background = buf[p++];\n  buf[p++];  // Pixel aspect ratio (unused?).\n\n  var global_palette_offset = null;\n  var global_palette_size   = null;\n\n  if (global_palette_flag) {\n    global_palette_offset = p;\n    global_palette_size = num_global_colors;\n    p += num_global_colors * 3;  // Seek past palette.\n  }\n\n  var no_eof = true;\n\n  var frames = [ ];\n\n  var delay = 0;\n  var transparent_index = null;\n  var disposal = 0;  // 0 - No disposal specified.\n  var loop_count = null;\n\n  this.width = width;\n  this.height = height;\n\n  while (no_eof && p < buf.length) {\n    switch (buf[p++]) {\n      case 0x21:  // Graphics Control Extension Block\n        switch (buf[p++]) {\n          case 0xff:  // Application specific block\n            // Try if it\'s a Netscape block (with animation loop counter).\n            if (buf[p   ] !== 0x0b ||  // 21 FF already read, check block size.\n                // NETSCAPE2.0\n                buf[p+1 ] == 0x4e && buf[p+2 ] == 0x45 && buf[p+3 ] == 0x54 &&\n                buf[p+4 ] == 0x53 && buf[p+5 ] == 0x43 && buf[p+6 ] == 0x41 &&\n                buf[p+7 ] == 0x50 && buf[p+8 ] == 0x45 && buf[p+9 ] == 0x32 &&\n                buf[p+10] == 0x2e && buf[p+11] == 0x30 &&\n                // Sub-block\n                buf[p+12] == 0x03 && buf[p+13] == 0x01 && buf[p+16] == 0) {\n              p += 14;\n              loop_count = buf[p++] | buf[p++] << 8;\n              p++;  // Skip terminator.\n            } else {  // We don\'t know what it is, just try to get past it.\n              p += 12;\n              while (true) {  // Seek through subblocks.\n                var block_size = buf[p++];\n                // Bad block size (ex: undefined from an out of bounds read).\n                if (!(block_size >= 0)) throw Error("Invalid block size");\n                if (block_size === 0) break;  // 0 size is terminator\n                p += block_size;\n              }\n            }\n            break;\n\n          case 0xf9:  // Graphics Control Extension\n            if (buf[p++] !== 0x4 || buf[p+4] !== 0)\n              throw new Error("Invalid graphics extension block.");\n            var pf1 = buf[p++];\n            delay = buf[p++] | buf[p++] << 8;\n            transparent_index = buf[p++];\n            if ((pf1 & 1) === 0) transparent_index = null;\n            disposal = pf1 >> 2 & 0x7;\n            p++;  // Skip terminator.\n            break;\n\n          case 0xfe:  // Comment Extension.\n            while (true) {  // Seek through subblocks.\n              var block_size = buf[p++];\n              // Bad block size (ex: undefined from an out of bounds read).\n              if (!(block_size >= 0)) throw Error("Invalid block size");\n              if (block_size === 0) break;  // 0 size is terminator\n              // console.log(buf.slice(p, p+block_size).toString(\'ascii\'));\n              p += block_size;\n            }\n            break;\n\n          default:\n            throw new Error(\n                "Unknown graphic control label: 0x" + buf[p-1].toString(16));\n        }\n        break;\n\n      case 0x2c:  // Image Descriptor.\n        var x = buf[p++] | buf[p++] << 8;\n        var y = buf[p++] | buf[p++] << 8;\n        var w = buf[p++] | buf[p++] << 8;\n        var h = buf[p++] | buf[p++] << 8;\n        var pf2 = buf[p++];\n        var local_palette_flag = pf2 >> 7;\n        var interlace_flag = pf2 >> 6 & 1;\n        var num_local_colors_pow2 = pf2 & 0x7;\n        var num_local_colors = 1 << (num_local_colors_pow2 + 1);\n        var palette_offset = global_palette_offset;\n        var palette_size = global_palette_size;\n        var has_local_palette = false;\n        if (local_palette_flag) {\n          var has_local_palette = true;\n          palette_offset = p;  // Override with local palette.\n          palette_size = num_local_colors;\n          p += num_local_colors * 3;  // Seek past palette.\n        }\n\n        var data_offset = p;\n\n        p++;  // codesize\n        while (true) {\n          var block_size = buf[p++];\n          // Bad block size (ex: undefined from an out of bounds read).\n          if (!(block_size >= 0)) throw Error("Invalid block size");\n          if (block_size === 0) break;  // 0 size is terminator\n          p += block_size;\n        }\n\n        frames.push({x: x, y: y, width: w, height: h,\n                     has_local_palette: has_local_palette,\n                     palette_offset: palette_offset,\n                     palette_size: palette_size,\n                     data_offset: data_offset,\n                     data_length: p - data_offset,\n                     transparent_index: transparent_index,\n                     interlaced: !!interlace_flag,\n                     delay: delay,\n                     disposal: disposal});\n        break;\n\n      case 0x3b:  // Trailer Marker (end of file).\n        no_eof = false;\n        break;\n\n      default:\n        throw new Error("Unknown gif block: 0x" + buf[p-1].toString(16));\n        break;\n    }\n  }\n\n  this.numFrames = function() {\n    return frames.length;\n  };\n\n  this.loopCount = function() {\n    return loop_count;\n  };\n\n  this.frameInfo = function(frame_num) {\n    if (frame_num < 0 || frame_num >= frames.length)\n      throw new Error("Frame index out of range.");\n    return frames[frame_num];\n  }\n\n  this.decodeAndBlitFrameBGRA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it\'s related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = b;\n        pixels[op++] = g;\n        pixels[op++] = r;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n\n  // I will go to copy and paste hell one day...\n  this.decodeAndBlitFrameRGBA = function(frame_num, pixels) {\n    var frame = this.frameInfo(frame_num);\n    var num_pixels = frame.width * frame.height;\n    var index_stream = new Uint8Array(num_pixels);  // At most 8-bit indices.\n    GifReaderLZWOutputIndexStream(\n        buf, frame.data_offset, index_stream, num_pixels);\n    var palette_offset = frame.palette_offset;\n\n    // NOTE(deanm): It seems to be much faster to compare index to 256 than\n    // to === null.  Not sure why, but CompareStub_EQ_STRICT shows up high in\n    // the profile, not sure if it\'s related to using a Uint8Array.\n    var trans = frame.transparent_index;\n    if (trans === null) trans = 256;\n\n    // We are possibly just blitting to a portion of the entire frame.\n    // That is a subrect within the framerect, so the additional pixels\n    // must be skipped over after we finished a scanline.\n    var framewidth  = frame.width;\n    var framestride = width - framewidth;\n    var xleft       = framewidth;  // Number of subrect pixels left in scanline.\n\n    // Output indicies of the top left and bottom right corners of the subrect.\n    var opbeg = ((frame.y * width) + frame.x) * 4;\n    var opend = ((frame.y + frame.height) * width + frame.x) * 4;\n    var op    = opbeg;\n\n    var scanstride = framestride * 4;\n\n    // Use scanstride to skip past the rows when interlacing.  This is skipping\n    // 7 rows for the first two passes, then 3 then 1.\n    if (frame.interlaced === true) {\n      scanstride += width * 4 * 7;  // Pass 1.\n    }\n\n    var interlaceskip = 8;  // Tracking the row interval in the current pass.\n\n    for (var i = 0, il = index_stream.length; i < il; ++i) {\n      var index = index_stream[i];\n\n      if (xleft === 0) {  // Beginning of new scan line\n        op += scanstride;\n        xleft = framewidth;\n        if (op >= opend) { // Catch the wrap to switch passes when interlacing.\n          scanstride = framestride * 4 + width * 4 * (interlaceskip-1);\n          // interlaceskip / 2 * 4 is interlaceskip << 1.\n          op = opbeg + (framewidth + framestride) * (interlaceskip << 1);\n          interlaceskip >>= 1;\n        }\n      }\n\n      if (index === trans) {\n        op += 4;\n      } else {\n        var r = buf[palette_offset + index * 3];\n        var g = buf[palette_offset + index * 3 + 1];\n        var b = buf[palette_offset + index * 3 + 2];\n        pixels[op++] = r;\n        pixels[op++] = g;\n        pixels[op++] = b;\n        pixels[op++] = 255;\n      }\n      --xleft;\n    }\n  };\n}\n\nfunction GifReaderLZWOutputIndexStream(code_stream, p, output, output_length) {\n  var min_code_size = code_stream[p++];\n\n  var clear_code = 1 << min_code_size;\n  var eoi_code = clear_code + 1;\n  var next_code = eoi_code + 1;\n\n  var cur_code_size = min_code_size + 1;  // Number of bits per code.\n  // NOTE: This shares the same name as the encoder, but has a different\n  // meaning here.  Here this masks each code coming from the code stream.\n  var code_mask = (1 << cur_code_size) - 1;\n  var cur_shift = 0;\n  var cur = 0;\n\n  var op = 0;  // Output pointer.\n\n  var subblock_size = code_stream[p++];\n\n  // TODO(deanm): Would using a TypedArray be any faster?  At least it would\n  // solve the fast mode / backing store uncertainty.\n  // var code_table = Array(4096);\n  var code_table = new Int32Array(4096);  // Can be signed, we only use 20 bits.\n\n  var prev_code = null;  // Track code-1.\n\n  while (true) {\n    // Read up to two bytes, making sure we always 12-bits for max sized code.\n    while (cur_shift < 16) {\n      if (subblock_size === 0) break;  // No more data to be read.\n\n      cur |= code_stream[p++] << cur_shift;\n      cur_shift += 8;\n\n      if (subblock_size === 1) {  // Never let it get to 0 to hold logic above.\n        subblock_size = code_stream[p++];  // Next subblock.\n      } else {\n        --subblock_size;\n      }\n    }\n\n    // TODO(deanm): We should never really get here, we should have received\n    // and EOI.\n    if (cur_shift < cur_code_size)\n      break;\n\n    var code = cur & code_mask;\n    cur >>= cur_code_size;\n    cur_shift -= cur_code_size;\n\n    // TODO(deanm): Maybe should check that the first code was a clear code,\n    // at least this is what you\'re supposed to do.  But actually our encoder\n    // now doesn\'t emit a clear code first anyway.\n    if (code === clear_code) {\n      // We don\'t actually have to clear the table.  This could be a good idea\n      // for greater error checking, but we don\'t really do any anyway.  We\n      // will just track it with next_code and overwrite old entries.\n\n      next_code = eoi_code + 1;\n      cur_code_size = min_code_size + 1;\n      code_mask = (1 << cur_code_size) - 1;\n\n      // Don\'t update prev_code ?\n      prev_code = null;\n      continue;\n    } else if (code === eoi_code) {\n      break;\n    }\n\n    // We have a similar situation as the decoder, where we want to store\n    // variable length entries (code table entries), but we want to do in a\n    // faster manner than an array of arrays.  The code below stores sort of a\n    // linked list within the code table, and then "chases" through it to\n    // construct the dictionary entries.  When a new entry is created, just the\n    // last byte is stored, and the rest (prefix) of the entry is only\n    // referenced by its table entry.  Then the code chases through the\n    // prefixes until it reaches a single byte code.  We have to chase twice,\n    // first to compute the length, and then to actually copy the data to the\n    // output (backwards, since we know the length).  The alternative would be\n    // storing something in an intermediate stack, but that doesn\'t make any\n    // more sense.  I implemented an approach where it also stored the length\n    // in the code table, although it\'s a bit tricky because you run out of\n    // bits (12 + 12 + 8), but I didn\'t measure much improvements (the table\n    // entries are generally not the long).  Even when I created benchmarks for\n    // very long table entries the complexity did not seem worth it.\n    // The code table stores the prefix entry in 12 bits and then the suffix\n    // byte in 8 bits, so each entry is 20 bits.\n\n    var chase_code = code < next_code ? code : prev_code;\n\n    // Chase what we will output, either {CODE} or {CODE-1}.\n    var chase_length = 0;\n    var chase = chase_code;\n    while (chase > clear_code) {\n      chase = code_table[chase] >> 8;\n      ++chase_length;\n    }\n\n    var k = chase;\n\n    var op_end = op + chase_length + (chase_code !== code ? 1 : 0);\n    if (op_end > output_length) {\n      console.log("Warning, gif stream longer than expected.");\n      return;\n    }\n\n    // Already have the first byte from the chase, might as well write it fast.\n    output[op++] = k;\n\n    op += chase_length;\n    var b = op;  // Track pointer, writing backwards.\n\n    if (chase_code !== code)  // The case of emitting {CODE-1} + k.\n      output[op++] = k;\n\n    chase = chase_code;\n    while (chase_length--) {\n      chase = code_table[chase];\n      output[--b] = chase & 0xff;  // Write backwards.\n      chase >>= 8;  // Pull down to the prefix code.\n    }\n\n    if (prev_code !== null && next_code < 4096) {\n      code_table[next_code++] = prev_code << 8 | k;\n      // TODO(deanm): Figure out this clearing vs code growth logic better.  I\n      // have an feeling that it should just happen somewhere else, for now it\n      // is awkward between when we grow past the max and then hit a clear code.\n      // For now just check if we hit the max 12-bits (then a clear code should\n      // follow, also of course encoded in 12-bits).\n      if (next_code >= code_mask+1 && cur_code_size < 12) {\n        ++cur_code_size;\n        code_mask = code_mask << 1 | 1;\n      }\n    }\n\n    prev_code = code;\n  }\n\n  if (op !== output_length) {\n    console.log("Warning, gif stream shorter than expected.");\n  }\n\n  return output;\n}\n\n// CommonJS.\ntry { exports.GifWriter = GifWriter; exports.GifReader = GifReader } catch(e) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, "canvastoDataURL", function() { return /* reexport */ canvastoDataURL; });\n__webpack_require__.d(__webpack_exports__, "canvastoFile", function() { return /* reexport */ canvastoFile; });\n__webpack_require__.d(__webpack_exports__, "dataURLtoFile", function() { return /* reexport */ dataURLtoFile; });\n__webpack_require__.d(__webpack_exports__, "dataURLtoImage", function() { return /* reexport */ dataURLtoImage; });\n__webpack_require__.d(__webpack_exports__, "downloadFile", function() { return /* reexport */ downloadFile; });\n__webpack_require__.d(__webpack_exports__, "filetoDataURL", function() { return /* reexport */ filetoDataURL; });\n__webpack_require__.d(__webpack_exports__, "imagetoCanvas", function() { return /* reexport */ imagetoCanvas; });\n__webpack_require__.d(__webpack_exports__, "urltoBlob", function() { return /* reexport */ urltoBlob; });\n__webpack_require__.d(__webpack_exports__, "urltoImage", function() { return /* reexport */ urltoImage; });\n__webpack_require__.d(__webpack_exports__, "compress", function() { return /* binding */ compress; });\n__webpack_require__.d(__webpack_exports__, "compressAccurately", function() { return /* binding */ compressAccurately; });\n__webpack_require__.d(__webpack_exports__, "EImageType", function() { return /* reexport */ EImageType; });\n\n// CONCATENATED MODULE: ./src/models/index.ts\nvar EImageType;\r\n(function (EImageType) {\r\n    EImageType["PNG"] = "image/png";\r\n    EImageType["JPEG"] = "image/jpeg";\r\n    EImageType["GIF"] = "image/gif";\r\n})(EImageType || (EImageType = {}));\r\n\n// CONCATENATED MODULE: ./src/utils/checkImageType.ts\nfunction checkImageType(type) {\r\n    return [\'image/png\', \'image/jpeg\', \'image/gif\'].some(i => i === type);\r\n}\r\n\n// CONCATENATED MODULE: ./src/utils/index.ts\n\r\n\r\n\n// CONCATENATED MODULE: ./src/canvastoDataURL.ts\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n/**\r\n * 将一个Canvas对象转变为一个dataURL字符串\r\n * 该方法可以做压缩处理\r\n *\r\n * @param {canvas} canvas\r\n * @param {number=} quality - 传入范围 0-1，表示图片压缩质量，默认0.92\r\n * @param {string=} type - 确定转换后的图片类型，选项有 "image/png", "image/jpeg", "image/gif",默认"image/jpeg"\r\n * @returns {Promise(string)} Promise含有一个dataURL字符串参数\r\n */\r\nfunction canvastoDataURL(canvas, quality = 0.92, type = EImageType.JPEG) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        if (!checkImageType(type)) {\r\n            type = EImageType.JPEG;\r\n        }\r\n        return canvas.toDataURL(type, quality);\r\n    });\r\n}\r\n;\r\n\n// CONCATENATED MODULE: ./src/canvastoFile.ts\n\r\n/**\r\n * 将一个canvas对象转变为一个File（Blob）对象\r\n * 该方法可以做压缩处理\r\n *\r\n * @param {canvas} canvas\r\n * @param {number=} quality - 传入范围 0-1，表示图片压缩质量，默认0.92\r\n * @param {string=} type - 确定转换后的图片类型，选项有 "image/png", "image/jpeg", "image/gif",默认"image/jpeg"\r\n * @returns {Promise(Blob)}\r\n */\r\nfunction canvastoFile(canvas, quality = 0.92, type = EImageType.JPEG) {\r\n    return new Promise(resolve => canvas.toBlob(blob => resolve(blob), type, quality));\r\n}\r\n;\r\n\n// CONCATENATED MODULE: ./src/dataURLtoFile.ts\nvar dataURLtoFile_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n/**\r\n * 将一个dataURL字符串转变为一个File（Blob）对象\r\n * 转变时可以确定File对象的类型\r\n *\r\n * @param {string} dataURL\r\n * @param {string=} type - 确定转换后的图片类型，选项有 "image/png", "image/jpeg", "image/gif"\r\n * @returns {Promise(Blob)}\r\n */\r\nfunction dataURLtoFile(dataURL, type) {\r\n    return dataURLtoFile_awaiter(this, void 0, void 0, function* () {\r\n        const arr = dataURL.split(\',\');\r\n        let mime = arr[0].match(/:(.*?);/)[1];\r\n        const bstr = atob(arr[1]);\r\n        let n = bstr.length;\r\n        const u8arr = new Uint8Array(n);\r\n        while (n--) {\r\n            u8arr[n] = bstr.charCodeAt(n);\r\n        }\r\n        if (checkImageType(type)) {\r\n            mime = type;\r\n        }\r\n        return new Blob([u8arr], {\r\n            type: mime,\r\n        });\r\n    });\r\n}\r\n;\r\n\n// CONCATENATED MODULE: ./src/dataURLtoImage.ts\n/**\r\n * 将dataURL字符串转变为image对象\r\n *\r\n * @param {srting} dataURL - dataURL字符串\r\n * @returns {Promise(Image)}\r\n */\r\nfunction dataURLtoImage(dataURL) {\r\n    return new Promise((resolve, reject) => {\r\n        const img = new Image();\r\n        img.onload = () => resolve(img);\r\n        img.onerror = () => reject(new Error(\'dataURLtoImage(): dataURL is illegal\'));\r\n        img.src = dataURL;\r\n    });\r\n}\r\n;\r\n\n// CONCATENATED MODULE: ./src/downloadFile.ts\n/**\r\n * 将图片下载到本地\r\n *\r\n * @param {Blob} file - 一个File（Blob）对象\r\n * @param {string=} fileName - 下载后的文件名（可选参数，不传以时间戳命名文件）\r\n */\r\nfunction downloadFile(file, fileName) {\r\n    const link = document.createElement(\'a\');\r\n    link.href = window.URL.createObjectURL(file);\r\n    link.download = fileName || Date.now().toString(36);\r\n    document.body.appendChild(link);\r\n    const evt = document.createEvent(\'MouseEvents\');\r\n    evt.initEvent(\'click\', false, false);\r\n    link.dispatchEvent(evt);\r\n    document.body.removeChild(link);\r\n}\r\n;\r\n\n// CONCATENATED MODULE: ./src/filetoDataURL.ts\n/**\r\n * 将File（Blob）对象转变为一个dataURL字符串\r\n *\r\n * @param {Blob} file\r\n * @returns {Promise(string)} Promise含有一个dataURL字符串参数\r\n */\r\nfunction filetoDataURL(file) {\r\n    return new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onloadend = e => resolve(e.target.result);\r\n        reader.readAsDataURL(file);\r\n    });\r\n}\r\n;\r\n\n// EXTERNAL MODULE: ./node_modules/omggif/omggif.js\nvar omggif = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/neuquant.js\nfunction NeuQuant() {\r\n    var netsize = 256; // number of colours used\r\n  \r\n    // four primes near 500 - assume no image has a length so large\r\n    // that it is divisible by all four primes\r\n    var prime1 = 499;\r\n    var prime2 = 491;\r\n    var prime3 = 487;\r\n    var prime4 = 503;\r\n  \r\n    // minimum size for input image\r\n    var minpicturebytes = 3 * prime4;\r\n  \r\n    // Network Definitions\r\n  \r\n    var maxnetpos = netsize - 1;\r\n    var netbiasshift = 4; // bias for colour values\r\n    var ncycles = 100; // no. of learning cycles\r\n  \r\n    // defs for freq and bias\r\n    var intbiasshift = 16; // bias for fractions\r\n    var intbias = 1 << intbiasshift;\r\n    var gammashift = 10; // gamma = 1024\r\n    var gamma = 1 << gammashift;\r\n    var betashift = 10;\r\n    var beta = intbias >> betashift; // beta = 1/1024\r\n    var betagamma = intbias << gammashift - betashift;\r\n  \r\n    // defs for decreasing radius factor\r\n    // For 256 colors, radius starts at 32.0 biased by 6 bits\r\n    // and decreases by a factor of 1/30 each cycle\r\n    var initrad = netsize >> 3;\r\n    var radiusbiasshift = 6;\r\n    var radiusbias = 1 << radiusbiasshift;\r\n    var initradius = initrad * radiusbias;\r\n    var radiusdec = 30;\r\n  \r\n    // defs for decreasing alpha factor\r\n    // Alpha starts at 1.0 biased by 10 bits\r\n    var alphabiasshift = 10;\r\n    var initalpha = 1 << alphabiasshift;\r\n    var alphadec;\r\n  \r\n    // radbias and alpharadbias used for radpower calculation\r\n    var radbiasshift = 8;\r\n    var radbias = 1 << radbiasshift;\r\n    var alpharadbshift = alphabiasshift + radbiasshift;\r\n    var alpharadbias = 1 << alpharadbshift;\r\n  \r\n    // Input image\r\n    var thepicture;\r\n    // Height * Width * 3\r\n    var lengthcount;\r\n    // Sampling factor 1..30\r\n    var samplefac;\r\n  \r\n    // The network itself\r\n    var network;\r\n    var netindex = [];\r\n  \r\n    // for network lookup - really 256\r\n    var bias = [];\r\n  \r\n    // bias and freq arrays for learning\r\n    var freq = [];\r\n    var radpower = [];\r\n  \r\n    function NeuQuantConstructor(thepic, len, sample) {\r\n  \r\n      var i;\r\n      var p;\r\n  \r\n      thepicture = thepic;\r\n      lengthcount = len;\r\n      samplefac = sample;\r\n  \r\n      network = new Array(netsize);\r\n  \r\n      for (i = 0; i < netsize; i++) {\r\n        network[i] = new Array(4);\r\n        p = network[i];\r\n        p[0] = p[1] = p[2] = (i << netbiasshift + 8) / netsize | 0;\r\n        freq[i] = intbias / netsize | 0; // 1 / netsize\r\n        bias[i] = 0;\r\n      }\r\n    }\r\n  \r\n    function colorMap() {\r\n      var map = [];\r\n      var index = new Array(netsize);\r\n      for (var i = 0; i < netsize; i++) {\r\n        index[network[i][3]] = i;\r\n      }var k = 0;\r\n      for (var l = 0; l < netsize; l++) {\r\n        var j = index[l];\r\n        map[k++] = network[j][0];\r\n        map[k++] = network[j][1];\r\n        map[k++] = network[j][2];\r\n      }\r\n      return map;\r\n    }\r\n  \r\n    // Insertion sort of network and building of netindex[0..255]\r\n    // (to do after unbias)\r\n    function inxbuild() {\r\n      var i;\r\n      var j;\r\n      var smallpos;\r\n      var smallval;\r\n      var p;\r\n      var q;\r\n      var previouscol;\r\n      var startpos;\r\n  \r\n      previouscol = 0;\r\n      startpos = 0;\r\n  \r\n      for (i = 0; i < netsize; i++) {\r\n  \r\n        p = network[i];\r\n        smallpos = i;\r\n        smallval = p[1]; // index on g\r\n        // find smallest in i..netsize-1\r\n        for (j = i + 1; j < netsize; j++) {\r\n  \r\n          q = network[j];\r\n  \r\n          if (q[1] < smallval) {\r\n            // index on g\r\n            smallpos = j;\r\n            smallval = q[1]; // index on g\r\n          }\r\n        }\r\n  \r\n        q = network[smallpos];\r\n  \r\n        // swap p (i) and q (smallpos) entries\r\n        if (i != smallpos) {\r\n          j = q[0];\r\n          q[0] = p[0];\r\n          p[0] = j;\r\n          j = q[1];\r\n          q[1] = p[1];\r\n          p[1] = j;\r\n          j = q[2];\r\n          q[2] = p[2];\r\n          p[2] = j;\r\n          j = q[3];\r\n          q[3] = p[3];\r\n          p[3] = j;\r\n        }\r\n  \r\n        // smallval entry is now in position i\r\n        if (smallval != previouscol) {\r\n  \r\n          netindex[previouscol] = startpos + i >> 1;\r\n  \r\n          for (j = previouscol + 1; j < smallval; j++) {\r\n            netindex[j] = i;\r\n          }\r\n  \r\n          previouscol = smallval;\r\n          startpos = i;\r\n        }\r\n      }\r\n  \r\n      netindex[previouscol] = startpos + maxnetpos >> 1;\r\n      for (j = previouscol + 1; j < 256; j++) {\r\n        netindex[j] = maxnetpos; // really 256\r\n      }\r\n    }\r\n  \r\n    // Main Learning Loop\r\n  \r\n    function learn() {\r\n      var i;\r\n      var j;\r\n      var b;\r\n      var g;\r\n      var r;\r\n      var radius;\r\n      var rad;\r\n      var alpha;\r\n      var step;\r\n      var delta;\r\n      var samplepixels;\r\n      var p;\r\n      var pix;\r\n      var lim;\r\n  \r\n      if (lengthcount < minpicturebytes) {\r\n        samplefac = 1;\r\n      }\r\n  \r\n      alphadec = 30 + (samplefac - 1) / 3;\r\n      p = thepicture;\r\n      pix = 0;\r\n      lim = lengthcount;\r\n      samplepixels = lengthcount / (3 * samplefac);\r\n      delta = samplepixels / ncycles | 0;\r\n      alpha = initalpha;\r\n      radius = initradius;\r\n  \r\n      rad = radius >> radiusbiasshift;\r\n      if (rad <= 1) {\r\n        rad = 0;\r\n      }\r\n  \r\n      for (i = 0; i < rad; i++) {\r\n        radpower[i] = alpha * ((rad * rad - i * i) * radbias / (rad * rad));\r\n      }\r\n  \r\n      if (lengthcount < minpicturebytes) {\r\n        step = 3;\r\n      } else if (lengthcount % prime1 !== 0) {\r\n        step = 3 * prime1;\r\n      } else {\r\n  \r\n        if (lengthcount % prime2 !== 0) {\r\n          step = 3 * prime2;\r\n        } else {\r\n          if (lengthcount % prime3 !== 0) {\r\n            step = 3 * prime3;\r\n          } else {\r\n            step = 3 * prime4;\r\n          }\r\n        }\r\n      }\r\n  \r\n      i = 0;\r\n  \r\n      while (i < samplepixels) {\r\n  \r\n        b = (p[pix + 0] & 0xff) << netbiasshift;\r\n        g = (p[pix + 1] & 0xff) << netbiasshift;\r\n        r = (p[pix + 2] & 0xff) << netbiasshift;\r\n        j = contest(b, g, r);\r\n  \r\n        altersingle(alpha, j, b, g, r);\r\n  \r\n        if (rad !== 0) {\r\n          // Alter neighbours\r\n          alterneigh(rad, j, b, g, r);\r\n        }\r\n  \r\n        pix += step;\r\n  \r\n        if (pix >= lim) {\r\n          pix -= lengthcount;\r\n        }\r\n  \r\n        i++;\r\n  \r\n        if (delta === 0) {\r\n          delta = 1;\r\n        }\r\n  \r\n        if (i % delta === 0) {\r\n          alpha -= alpha / alphadec;\r\n          radius -= radius / radiusdec;\r\n          rad = radius >> radiusbiasshift;\r\n  \r\n          if (rad <= 1) {\r\n            rad = 0;\r\n          }\r\n  \r\n          for (j = 0; j < rad; j++) {\r\n            radpower[j] = alpha * ((rad * rad - j * j) * radbias / (rad * rad));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  \r\n    // Search for BGR values 0..255 (after net is unbiased) and return colour index\r\n    function map(b, g, r) {\r\n      var i;\r\n      var j;\r\n      var dist;\r\n      var a;\r\n      var bestd;\r\n      var p;\r\n      var best;\r\n  \r\n      // Biggest possible distance is 256 * 3\r\n      bestd = 1000;\r\n      best = -1;\r\n      i = netindex[g]; // index on g\r\n      j = i - 1; // start at netindex[g] and work outwards\r\n  \r\n      while (i < netsize || j >= 0) {\r\n  \r\n        if (i < netsize) {\r\n  \r\n          p = network[i];\r\n  \r\n          dist = p[1] - g; // inx key\r\n  \r\n          if (dist >= bestd) {\r\n            i = netsize; // stop iter\r\n          } else {\r\n  \r\n            i++;\r\n  \r\n            if (dist < 0) {\r\n              dist = -dist;\r\n            }\r\n  \r\n            a = p[0] - b;\r\n  \r\n            if (a < 0) {\r\n              a = -a;\r\n            }\r\n  \r\n            dist += a;\r\n  \r\n            if (dist < bestd) {\r\n              a = p[2] - r;\r\n  \r\n              if (a < 0) {\r\n                a = -a;\r\n              }\r\n  \r\n              dist += a;\r\n  \r\n              if (dist < bestd) {\r\n                bestd = dist;\r\n                best = p[3];\r\n              }\r\n            }\r\n          }\r\n        }\r\n  \r\n        if (j >= 0) {\r\n  \r\n          p = network[j];\r\n  \r\n          dist = g - p[1]; // inx key - reverse dif\r\n  \r\n          if (dist >= bestd) {\r\n            j = -1; // stop iter\r\n          } else {\r\n  \r\n            j--;\r\n            if (dist < 0) {\r\n              dist = -dist;\r\n            }\r\n            a = p[0] - b;\r\n            if (a < 0) {\r\n              a = -a;\r\n            }\r\n            dist += a;\r\n  \r\n            if (dist < bestd) {\r\n              a = p[2] - r;\r\n              if (a < 0) {\r\n                a = -a;\r\n              }\r\n              dist += a;\r\n              if (dist < bestd) {\r\n                bestd = dist;\r\n                best = p[3];\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n  \r\n      return best;\r\n    }\r\n  \r\n    function process() {\r\n      learn();\r\n      unbiasnet();\r\n      inxbuild();\r\n      return colorMap();\r\n    }\r\n  \r\n    // Unbias network to give byte values 0..255 and record position i\r\n    // to prepare for sort\r\n    function unbiasnet() {\r\n      var i;\r\n      var j;\r\n  \r\n      for (i = 0; i < netsize; i++) {\r\n        network[i][0] >>= netbiasshift;\r\n        network[i][1] >>= netbiasshift;\r\n        network[i][2] >>= netbiasshift;\r\n        network[i][3] = i; // record colour no\r\n      }\r\n    }\r\n  \r\n    // Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2))\r\n    // in radpower[|i-j|]\r\n    function alterneigh(rad, i, b, g, r) {\r\n  \r\n      var j;\r\n      var k;\r\n      var lo;\r\n      var hi;\r\n      var a;\r\n      var m;\r\n  \r\n      var p;\r\n  \r\n      lo = i - rad;\r\n      if (lo < -1) {\r\n        lo = -1;\r\n      }\r\n  \r\n      hi = i + rad;\r\n  \r\n      if (hi > netsize) {\r\n        hi = netsize;\r\n      }\r\n  \r\n      j = i + 1;\r\n      k = i - 1;\r\n      m = 1;\r\n  \r\n      while (j < hi || k > lo) {\r\n  \r\n        a = radpower[m++];\r\n  \r\n        if (j < hi) {\r\n  \r\n          p = network[j++];\r\n  \r\n          try {\r\n  \r\n            p[0] -= a * (p[0] - b) / alpharadbias | 0;\r\n            p[1] -= a * (p[1] - g) / alpharadbias | 0;\r\n            p[2] -= a * (p[2] - r) / alpharadbias | 0;\r\n          } catch (e) {}\r\n        }\r\n  \r\n        if (k > lo) {\r\n  \r\n          p = network[k--];\r\n  \r\n          try {\r\n  \r\n            p[0] -= a * (p[0] - b) / alpharadbias | 0;\r\n            p[1] -= a * (p[1] - g) / alpharadbias | 0;\r\n            p[2] -= a * (p[2] - r) / alpharadbias | 0;\r\n          } catch (e) {}\r\n        }\r\n      }\r\n    }\r\n  \r\n    // Move neuron i towards biased (b,g,r) by factor alpha\r\n    function altersingle(alpha, i, b, g, r) {\r\n  \r\n      // alter hit neuron\r\n      var n = network[i];\r\n      var alphaMult = alpha / initalpha;\r\n      n[0] -= alphaMult * (n[0] - b) | 0;\r\n      n[1] -= alphaMult * (n[1] - g) | 0;\r\n      n[2] -= alphaMult * (n[2] - r) | 0;\r\n    }\r\n  \r\n    // Search for biased BGR values\r\n    function contest(b, g, r) {\r\n  \r\n      // finds closest neuron (min dist) and updates freq\r\n      // finds best neuron (min dist-bias) and returns position\r\n      // for frequently chosen neurons, freq[i] is high and bias[i] is negative\r\n      // bias[i] = gamma*((1/netsize)-freq[i])\r\n  \r\n      var i;\r\n      var dist;\r\n      var a;\r\n      var biasdist;\r\n      var betafreq;\r\n      var bestpos;\r\n      var bestbiaspos;\r\n      var bestd;\r\n      var bestbiasd;\r\n      var n;\r\n  \r\n      bestd = ~(1 << 31);\r\n      bestbiasd = bestd;\r\n      bestpos = -1;\r\n      bestbiaspos = bestpos;\r\n  \r\n      for (i = 0; i < netsize; i++) {\r\n  \r\n        n = network[i];\r\n        dist = n[0] - b;\r\n  \r\n        if (dist < 0) {\r\n          dist = -dist;\r\n        }\r\n  \r\n        a = n[1] - g;\r\n  \r\n        if (a < 0) {\r\n          a = -a;\r\n        }\r\n  \r\n        dist += a;\r\n  \r\n        a = n[2] - r;\r\n  \r\n        if (a < 0) {\r\n          a = -a;\r\n        }\r\n  \r\n        dist += a;\r\n  \r\n        if (dist < bestd) {\r\n          bestd = dist;\r\n          bestpos = i;\r\n        }\r\n  \r\n        biasdist = dist - (bias[i] >> intbiasshift - netbiasshift);\r\n  \r\n        if (biasdist < bestbiasd) {\r\n          bestbiasd = biasdist;\r\n          bestbiaspos = i;\r\n        }\r\n  \r\n        betafreq = freq[i] >> betashift;\r\n        freq[i] -= betafreq;\r\n        bias[i] += betafreq << gammashift;\r\n      }\r\n  \r\n      freq[bestpos] += beta;\r\n      bias[bestpos] -= betagamma;\r\n      return bestbiaspos;\r\n    }\r\n  \r\n    NeuQuantConstructor.apply(this, arguments);\r\n\r\n    let exports = {};\r\n    exports.map = map;\r\n    exports.process = process;\r\n\r\n    return exports;\r\n  }\n// CONCATENATED MODULE: ./src/imageDataToRGB.ts\n/**\r\n * 将File（Blob）对象转变为一个dataURL字符串\r\n *\r\n * @param {ImageData} data\r\n * @returns {number[]]} []\r\n */\r\nfunction imageDataToRGB(data, width, height) {\r\n    let length = width * height * 4;\r\n    let i = 0;\r\n    let rgb = [];\r\n    while (i < length) {\r\n        rgb.push(data[i++]);\r\n        rgb.push(data[i++]);\r\n        rgb.push(data[i++]);\r\n        i++; // for the alpha channel which we don\'t care about\r\n    }\r\n    return rgb;\r\n}\r\n\n// CONCATENATED MODULE: ./src/processFrameWithQuantizer.ts\n\r\n\r\nfunction componentizedPaletteToArray(paletteRGB) {\r\n    paletteRGB = paletteRGB || [];\r\n    let paletteArray = [];\r\n    for (let i = 0; i < paletteRGB.length; i += 3) {\r\n        let r = paletteRGB[i];\r\n        let g = paletteRGB[i + 1];\r\n        let b = paletteRGB[i + 2];\r\n        paletteArray.push(r << 16 | g << 8 | b);\r\n    }\r\n    return paletteArray;\r\n}\r\n/**\r\n * 将File（Blob）对象转变为一个dataURL字符串\r\n * https://github.com/yahoo/gifshot/blob/master/src/gifshot.js\r\n *\r\n * @param {ImageData} imageData\r\n * @param {number} width\r\n * @param {number} height\r\n * @param {number} sampleInterval\r\n * @returns {Array} Promise含有一个dataURL字符串参数\r\n */\r\nfunction processFrameWithQuantizer(imageData, width, height, sampleInterval) {\r\n    let rgbComponents = imageDataToRGB(Array.prototype.slice.call(imageData.data), width, height);\r\n    let numberPixels = width * height;\r\n    let nq = NeuQuant(rgbComponents, rgbComponents.length, sampleInterval);\r\n    let paletteRGBnq = nq.process();\r\n    let paletteArray = [];\r\n    // Check line 1135, gifshot.js.\r\n    paletteArray = new Uint32Array(componentizedPaletteToArray(paletteRGBnq));\r\n    let indexedPixels = new Uint8Array(numberPixels);\r\n    let k = 0;\r\n    for (let i = 0; i < numberPixels; i++) {\r\n        let r = rgbComponents[k++];\r\n        let g = rgbComponents[k++];\r\n        let b = rgbComponents[k++];\r\n        indexedPixels[i] = nq.map(r, g, b);\r\n    }\r\n    return {\r\n        pixels: indexedPixels,\r\n        palette: paletteArray\r\n    };\r\n}\r\n\n// CONCATENATED MODULE: ./src/urltoBlob.ts\n/**\r\n * 通过一个图片的url加载所需要的File（Blob）对象\r\n *\r\n * @param {string} url - 图片URL\r\n * @returns {Promise(Blob)}\r\n *\r\n */\r\nfunction urltoBlob(url) {\r\n    return fetch(url).then(response => response.blob());\r\n}\r\n;\r\n\n// CONCATENATED MODULE: ./src/imagetoCanvas.ts\nvar imagetoCanvas_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\nfunction scaleImageData(imageData, scale_x, scale_y) {\r\n    let canvas = document.createElement(\'canvas\');\r\n    canvas.width = imageData.width;\r\n    canvas.height = imageData.height;\r\n    let context = canvas.getContext(\'2d\');\r\n    context.putImageData(imageData, 0, 0);\r\n    let tmpCanvas = document.createElement(\'canvas\');\r\n    tmpCanvas.width = imageData.width * scale_x;\r\n    tmpCanvas.height = imageData.height * scale_y;\r\n    let tmpCtx = tmpCanvas.getContext(\'2d\');\r\n    tmpCtx.scale(scale_x, scale_y);\r\n    tmpCtx.drawImage(canvas, 0, 0, canvas.width, canvas.height);\r\n    return tmpCtx.getImageData(0, 0, tmpCanvas.width, tmpCanvas.height);\r\n}\r\n/**\r\n * 将一个image对象转变为一个canvas对象\r\n *\r\n * @param {image} image\r\n *\r\n * @typedef {Object=} config - 转变为canvas时的一些参数配置\r\n * \t\t@param {number} width - canvas图像的宽度，默认为image的宽度\r\n * \t\t@param {number} height - canvas图像的高度，默认为image的高度\r\n * \t\t@param {number} scale - 相对于image的缩放比例，范围0-10，默认不缩放；\r\n * \t\t\t设置config.scale后会覆盖config.width和config.height的设置；\r\n * \t\t@param {number} orientation - 图片旋转参数，默认不旋转，参考如下：\r\n * \t\t\t参数\t 旋转方向\r\n * \t\t\t1\t\t0°\r\n * \t\t\t2\t\t水平翻转\r\n * \t\t\t3\t\t180°\r\n * \t\t\t4\t\t垂直翻转\r\n * \t\t\t5\t\t顺时针90°+水平翻转\r\n * \t\t\t6\t\t顺时针90°\r\n * \t\t\t7\t\t顺时针90°+垂直翻转\r\n * \t\t\t8\t\t逆时针90°\r\n * @type {config}\r\n *\r\n * @returns {Promise(canvas)}\r\n */\r\nfunction imagetoCanvas(image, config = {}) {\r\n    return imagetoCanvas_awaiter(this, void 0, void 0, function* () {\r\n        const myConfig = Object.assign({}, config);\r\n        const cvs = document.createElement(\'canvas\');\r\n        const ctx = cvs.getContext(\'2d\');\r\n        let height;\r\n        let width;\r\n        for (const i in myConfig) {\r\n            if (Object.prototype.hasOwnProperty.call(myConfig, i)) {\r\n                myConfig[i] = Number(myConfig[i]);\r\n            }\r\n        }\r\n        // 设置宽高\r\n        if (!myConfig.scale) {\r\n            width = myConfig.width || myConfig.height * image.width / image.height || image.width;\r\n            height = myConfig.height || myConfig.width * image.height / image.width || image.height;\r\n        }\r\n        else {\r\n            // 缩放比例0-10，不在此范围则保持原来图像大小\r\n            const scale = myConfig.scale > 0 && myConfig.scale < 10 ? myConfig.scale : 1;\r\n            width = Math.floor(image.width * scale);\r\n            height = Math.floor(image.height * scale);\r\n        }\r\n        // GIF read/write.\r\n        let blob = yield urltoBlob(image.src);\r\n        if (blob.type == "image/gif") {\r\n            let buf = new Uint8Array(yield blob.arrayBuffer());\r\n            let reader = new omggif["GifReader"](buf);\r\n            let gifOptions = {\r\n                loop: reader.loopCount(),\r\n            };\r\n            let writtenBuf = new Uint8Array(width * height * reader.numFrames() * 5);\r\n            let writer = new omggif["GifWriter"](writtenBuf, width, height, gifOptions);\r\n            let imageDatas = new Array(reader.numFrames());\r\n            for (let k = 0; k < imageDatas.length; k++) {\r\n                let image = new ImageData(reader.width, reader.height);\r\n                let frameInfo = reader.frameInfo(k);\r\n                if (k > 0 && frameInfo.disposal < 2) {\r\n                    image.data.set(new Uint8ClampedArray(imageDatas[k - 1].data));\r\n                }\r\n                reader.decodeAndBlitFrameRGBA(k, image.data);\r\n                imageDatas[k] = image;\r\n            }\r\n            ;\r\n            // Write\r\n            imageDatas.map((image, k) => {\r\n                let frameInfo = reader.frameInfo(k);\r\n                image = scaleImageData(image, width / reader.width, height / reader.height);\r\n                let frameNq = processFrameWithQuantizer(image, width, height, 10);\r\n                let frameOptions = {\r\n                    palette: Array.prototype.slice.call(frameNq.palette),\r\n                    delay: frameInfo.delay,\r\n                    disposal: frameInfo.disposal,\r\n                };\r\n                writer.addFrame(0, 0, width, height, frameNq.pixels, frameOptions);\r\n            });\r\n            let base64Png = imageDatas.map((imageData, k) => {\r\n                let canvas = document.createElement(\'canvas\');\r\n                canvas.width = width;\r\n                canvas.height = height;\r\n                let context = canvas.getContext(\'2d\');\r\n                context.putImageData(imageData, 0, 0);\r\n                return canvas.toDataURL("image/png");\r\n            });\r\n            console.log(base64Png);\r\n            writer.end();\r\n            let bufStr = bufferToString(writtenBuf);\r\n            let gif = `data:image/gif;base64,${btoa(bufStr)}`;\r\n            console.log(gif);\r\n        }\r\n        // 当顺时针或者逆时针旋转90时，需要交换canvas的宽高\r\n        if ([5, 6, 7, 8].some(i => i === myConfig.orientation)) {\r\n            cvs.height = width;\r\n            cvs.width = height;\r\n        }\r\n        else {\r\n            cvs.height = height;\r\n            cvs.width = width;\r\n        }\r\n        // 设置方向\r\n        switch (myConfig.orientation) {\r\n            case 3:\r\n                ctx.rotate(180 * Math.PI / 180);\r\n                ctx.drawImage(image, -cvs.width, -cvs.height, cvs.width, cvs.height);\r\n                break;\r\n            case 6:\r\n                ctx.rotate(90 * Math.PI / 180);\r\n                ctx.drawImage(image, 0, -cvs.width, cvs.height, cvs.width);\r\n                break;\r\n            case 8:\r\n                ctx.rotate(270 * Math.PI / 180);\r\n                ctx.drawImage(image, -cvs.height, 0, cvs.height, cvs.width);\r\n                break;\r\n            case 2:\r\n                ctx.translate(cvs.width, 0);\r\n                ctx.scale(-1, 1);\r\n                ctx.drawImage(image, 0, 0, cvs.width, cvs.height);\r\n                break;\r\n            case 4:\r\n                ctx.translate(cvs.width, 0);\r\n                ctx.scale(-1, 1);\r\n                ctx.rotate(180 * Math.PI / 180);\r\n                ctx.drawImage(image, -cvs.width, -cvs.height, cvs.width, cvs.height);\r\n                break;\r\n            case 5:\r\n                ctx.translate(cvs.width, 0);\r\n                ctx.scale(-1, 1);\r\n                ctx.rotate(90 * Math.PI / 180);\r\n                ctx.drawImage(image, 0, -cvs.width, cvs.height, cvs.width);\r\n                break;\r\n            case 7:\r\n                ctx.translate(cvs.width, 0);\r\n                ctx.scale(-1, 1);\r\n                ctx.rotate(270 * Math.PI / 180);\r\n                ctx.drawImage(image, -cvs.height, 0, cvs.height, cvs.width);\r\n                break;\r\n            default:\r\n                ctx.drawImage(image, 0, 0, cvs.width, cvs.height);\r\n        }\r\n        return cvs;\r\n    });\r\n}\r\n;\r\nlet byteMap = [];\r\nfor (let i = 0; i < 256; i++) {\r\n    byteMap[i] = String.fromCharCode(i);\r\n}\r\nfunction bufferToString(buffer) {\r\n    let numberValues = buffer.length;\r\n    let str = \'\';\r\n    let x = -1;\r\n    while (++x < numberValues) {\r\n        str += byteMap[buffer[x]];\r\n    }\r\n    return str;\r\n}\r\n\n// CONCATENATED MODULE: ./src/urltoImage.ts\n/**\r\n * 通过一个图片的url加载所需要的image对象\r\n *\r\n * @param {string} url - 图片URL\r\n * @returns {Promise(Image)}\r\n */\r\nfunction urltoImage(url) {\r\n    return new Promise((resolve, reject) => {\r\n        const img = new Image();\r\n        img.onload = () => resolve(img);\r\n        img.onerror = () => reject(new Error(\'urltoImage(): Image failed to load, please check the image URL\'));\r\n        img.src = url;\r\n    });\r\n}\r\n;\r\n\n// CONCATENATED MODULE: ./src/index.ts\nvar src_awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * 压缩File（Blob）对象\r\n * @param {Blob} file - 一个File（Blob）对象\r\n * @param {(number|object)} config - 如果传入是number类型，传入范围 0-1，表示图片压缩质量,默认0.92；也可以传入object类型，以便更详细的配置\r\n * @example\r\n * \t\timageConversion.compress(file,0.8)\r\n *\r\n * \t\timageConversion.compress(file,{\r\n * \t\t\tquality: 0.8, //图片压缩质量\r\n * \t\t\ttype："image/png", //转换后的图片类型，选项有 "image/png", "image/jpeg", "image/gif"\r\n * \t\t\twidth: 300, //生成图片的宽度\r\n * \t\t\theight：200， //生产图片的高度\r\n * \t\t\tscale: 0.5， //相对于原始图片的缩放比率,设置config.scale后会覆盖config.width和config.height的设置；\r\n * \t\t\torientation:2, //图片旋转方向\r\n * \t\t})\r\n *\r\n * @returns {Promise(Blob)}\r\n */\r\nfunction compress(file, config = {}) {\r\n    return src_awaiter(this, void 0, void 0, function* () {\r\n        if (!(file instanceof Blob)) {\r\n            throw new Error(\'compress(): First arg must be a Blob object or a File object.\');\r\n        }\r\n        if (typeof config !== \'object\') {\r\n            config = Object.assign({\r\n                quality: config,\r\n            });\r\n        }\r\n        config.quality = Number(config.quality);\r\n        if (Number.isNaN(config.quality)) {\r\n            return file;\r\n        }\r\n        const dataURL = yield filetoDataURL(file);\r\n        let originalMime = dataURL.split(\',\')[0].match(/:(.*?);/)[1]; // 原始图像图片类型\r\n        let mime = EImageType.JPEG; // 默认压缩类型\r\n        if (checkImageType(config.type)) {\r\n            mime = config.type;\r\n            originalMime = config.type;\r\n        }\r\n        const image = yield dataURLtoImage(dataURL);\r\n        const canvas = yield imagetoCanvas(image, Object.assign({}, config));\r\n        const compressDataURL = yield canvastoDataURL(canvas, config.quality, mime);\r\n        const compressFile = yield dataURLtoFile(compressDataURL, originalMime);\r\n        if (compressFile.size > file.size) {\r\n            return file;\r\n        }\r\n        return compressFile;\r\n    });\r\n}\r\n;\r\n/**\r\n * 根据体积压缩File（Blob）对象\r\n *\r\n * @param {Blob} file - 一个File（Blob）对象\r\n * @param {(number|object)} config - 如果传入是number类型，则指定压缩图片的体积,单位Kb;也可以传入object类型，以便更详细的配置\r\n * \t\t@param {number} size - 指定压缩图片的体积,单位Kb\r\n * \t\t@param {number} accuracy - 相对于指定压缩体积的精确度，范围0.8-0.99，默认0.95；\r\n *        如果设置 图片体积1000Kb,精确度0.9，则压缩结果为900Kb-1100Kb的图片都算合格；\r\n * @example\r\n *  \timageConversion.compress(file,100) //压缩后图片大小为100kb\r\n *\r\n * \t\timageConversion.compress(file,{\r\n * \t\t\tsize: 100, //图片压缩体积，单位Kb\r\n * \t\t\taccuracy: 0.9, //图片压缩体积的精确度，默认0.95\r\n * \t\t\ttype："image/png", //转换后的图片类型，选项有 "image/png", "image/jpeg", "image/gif"\r\n * \t\t\twidth: 300, //生成图片的宽度\r\n * \t\t\theight: 200, //生产图片的高度\r\n * \t\t\tscale: 0.5, //相对于原始图片的缩放比率,设置config.scale后会覆盖config.width和config.height的设置；\r\n * \t\t\torientation:2, //图片旋转方向\r\n * \t\t})\r\n *\r\n * @returns {Promise(Blob)}\r\n */\r\nfunction compressAccurately(file, config = {}) {\r\n    return src_awaiter(this, void 0, void 0, function* () {\r\n        if (!(file instanceof Blob)) {\r\n            throw new Error(\'compressAccurately(): First arg must be a Blob object or a File object.\');\r\n        }\r\n        if (typeof config !== \'object\') {\r\n            config = Object.assign({\r\n                size: config,\r\n            });\r\n        }\r\n        // 如果指定体积不是数字或者数字字符串，则不做处理\r\n        config.size = Number(config.size);\r\n        if (Number.isNaN(config.size)) {\r\n            return file;\r\n        }\r\n        // 如果指定体积大于原文件体积，则不做处理；\r\n        if (config.size * 1024 > file.size) {\r\n            return file;\r\n        }\r\n        config.accuracy = Number(config.accuracy);\r\n        if (!config.accuracy\r\n            || config.accuracy < 0.8\r\n            || config.accuracy > 0.99) {\r\n            config.accuracy = 0.95; // 默认精度0.95\r\n        }\r\n        const resultSize = {\r\n            max: config.size * (2 - config.accuracy) * 1024,\r\n            accurate: config.size * 1024,\r\n            min: config.size * config.accuracy * 1024,\r\n        };\r\n        const dataURL = yield filetoDataURL(file);\r\n        let originalMime = dataURL.split(\',\')[0].match(/:(.*?);/)[1]; // 原始图像图片类型\r\n        let mime = EImageType.JPEG;\r\n        if (checkImageType(config.type)) {\r\n            mime = config.type;\r\n            originalMime = config.type;\r\n        }\r\n        const image = yield dataURLtoImage(dataURL);\r\n        const canvas = yield imagetoCanvas(image, Object.assign({}, config));\r\n        /**\r\n         * 经过测试发现，blob.size与dataURL.length的比值约等于0.75\r\n         * 这个比值可以同过dataURLtoFile这个方法来测试验证\r\n         * 这里为了提高性能，直接通过这个比值来计算出blob.size\r\n         */\r\n        const proportion = 0.75;\r\n        let imageQuality = 0.5;\r\n        let compressDataURL;\r\n        const tempDataURLs = [null, null];\r\n        /**\r\n         * HTMLCanvasElement.toBlob()以及HTMLCanvasElement.toDataURL()压缩参数\r\n         * 的最小细粒度为0.01，而2的7次方为128，即只要循环7次，则会覆盖所有可能性\r\n         */\r\n        for (let x = 1; x <= 7; x++) {\r\n            compressDataURL = yield canvastoDataURL(canvas, imageQuality, mime);\r\n            const CalculationSize = compressDataURL.length * proportion;\r\n            // 如果到循环第七次还没有达到精确度的值，那说明该图片不能达到到此精确度要求\r\n            // 这时候最后一次循环出来的dataURL可能不是最精确的，需要取其周边两个dataURL三者比较来选出最精确的；\r\n            if (x === 7) {\r\n                if (resultSize.max < CalculationSize || resultSize.min > CalculationSize) {\r\n                    compressDataURL = [compressDataURL, ...tempDataURLs]\r\n                        .filter(i => i) // 去除null\r\n                        .sort((a, b) => Math.abs(a.length * proportion - resultSize.accurate)\r\n                        - Math.abs(b.length * proportion - resultSize.accurate))[0];\r\n                }\r\n                break;\r\n            }\r\n            if (resultSize.max < CalculationSize) {\r\n                tempDataURLs[1] = compressDataURL;\r\n                imageQuality -= Math.pow(0.5, (x + 1));\r\n            }\r\n            else if (resultSize.min > CalculationSize) {\r\n                tempDataURLs[0] = compressDataURL;\r\n                imageQuality += Math.pow(0.5, (x + 1));\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        const compressFile = yield dataURLtoFile(compressDataURL, originalMime);\r\n        // 如果压缩后体积大于原文件体积，则返回源文件；\r\n        if (compressFile.size > file.size) {\r\n            return file;\r\n        }\r\n        return compressFile;\r\n    });\r\n}\r\n;\r\n\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n')}])}));